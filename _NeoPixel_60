#include <WiFi.h>

//接続先のSSIDとパスワード
const char ssid[] = "******";
const char passwd[] = "******";

const int ledPin = 16; //赤色LED
const int bluePin = 4; //青色LED
float num = 0.0;
WiFiServer server(80);

#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
#include <avr/power.h> // Required for 16 MHz Adafruit Trinket
#endif

#define LED_PIN    5

#define LED_COUNT 60

Adafruit_NeoPixel strip(LED_COUNT, LED_PIN, NEO_GRB + NEO_KHZ800);

void setup() {
  delay(1000);
  Serial.begin(115200);
  pinMode(ledPin, OUTPUT);// set the LED pin mode
  //wifi接続シーケンス
  WiFi.begin(ssid, passwd);
  Serial.print("WiFi connecting...");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(100);
  }
  Serial.print("connected!!");
  Serial.println(WiFi.localIP());

  server.begin();

  ledcSetup(0, 12800, 8);
  ledcAttachPin(bluePin, 0);

#if defined(__AVR_ATtiny85__) && (F_CPU == 16000000)
  clock_prescale_set(clock_div_1);
#endif

  strip.begin();           // INITIALIZE NeoPixel strip object (REQUIRED)
  strip.show();            // Turn OFF all pixels ASAP
  strip.setBrightness(50); // Set BRIGHTNESS to about 1/5 (max = 255)

}

void loop() {
  WiFiClient client = server.available();

  if (client) {

    Serial.println("new client");
    String currentLine = "";
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        Serial.write(c);
        if (c == '\n') {
          if (currentLine.length() == 0) {
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();

            client.println("<!DOCTYPE html>");
            client.println("<html>");
            client.println("<head>");
            client.println("<meta name='viewport' content='initial-scale=1.5'>");
            client.println("</head>");
            client.println("<body>");
            client.println("<form method='get'>");
            client.println("<h1>ESP32</h1>");
            client.println("<h2>Wi-Fi LED Switch</h2>");
            client.println("<div><label><input type='radio' name=pwm value='0', display:block>0%<div><label>");
            client.println("<div><label><input type='radio' name=pwm value='25' display:block>25%<div><label>");
            client.println("<div><label><input type='radio' name=pwm value='50' display:block>50%<div><label>");
            client.println("<div><label><input type='radio' name=pwm value='75' display:block>75%<div><label>");
            client.println("<div><label><input type='radio' name=pwm value='100' display:block>100%<div><label>");
            client.println("<input type='submit' value='Send' style='background-color:white; color:blue;'>");
            client.println("<input type='hidden' value='pwm'>");
            client.println("</form>");
            client.println("</body>");
            client.println("</html>");
            client.println();
            break;
          } else {
            currentLine = "";
          }
        } else if (c != '\r') {
          currentLine += c;
        }

        while (currentLine.endsWith("GET /?pwm=0")) {
          colorWipe(strip.Color(127, 127, 127), 50); // white
          colorWipe(strip.Color(255,   0,   0), 50); // Red
          //  colorWipe(strip.Color(  0, 255,   0), 50); // Green
          //  colorWipe(strip.Color(  0,   0, 255), 50); // Blue

          theaterChase(strip.Color(127, 127, 127), 50); // White, half brightness
          theaterChase(strip.Color(127,   0,   0), 50); // Red, half brightness
          //  theaterChase(strip.Color(  0,   0, 127), 50); // Blue, half brightness

          rainbow(10);             // Flowing rainbow cycle along the whole strip
          theaterChaseRainbow(50); // Rainbow-enhanced theaterChase variant

          if (currentLine.endsWith("GET /?pwm=25")) {
            rainbow(10);             // Flowing rainbow cycle along the whole strip
          }
          if (currentLine.endsWith("GET /?pwm=50")) {
            theaterChaseRainbow(50); // Rainbow-enhanced theaterChase variant
          }
          if (currentLine.endsWith("GET /?pwm=75")) {
            colorWipe(strip.Color(127, 127, 127), 50); // white
            colorWipe(strip.Color(255,   0,   0), 50); // Red
          }
          if (currentLine.endsWith("GET /?pwm=100")) {
            theaterChase(strip.Color(127, 127, 127), 50); // White, half brightness
            theaterChase(strip.Color(127,   0,   0), 50); // Red, half brightness
          }

          while (currentLine.endsWith("GET /?pwm=25")) {
            rainbow(10);
          }
          while (currentLine.endsWith("GET /?pwm=50")) {
            theaterChaseRainbow(50);
          }
          while (currentLine.endsWith("GET /?pwm=75")) {
            colorWipe(strip.Color(127, 127, 127), 50); // white
            colorWipe(strip.Color(255,   0,   0), 50); // Red
          }
          while (currentLine.endsWith("GET /?pwm=100")) {
            theaterChase(strip.Color(127, 127, 127), 50); // White, half brightness
            theaterChase(strip.Color(127,   0,   0), 50); // Red, half brightness;
          }
        }
      }
    }

    client.stop();
    Serial.println("client disonnected");
    Serial.print(num);
  }
}

void colorWipe(uint32_t color, int wait) {
  for (int i = 0; i < strip.numPixels(); i++) { // For each pixel in strip...
    strip.setPixelColor(i, color);         //  Set pixel's color (in RAM)
    strip.show();                          //  Update strip to match
    delay(wait);                           //  Pause for a moment
  }
}

void theaterChase(uint32_t color, int wait) {
  for (int a = 0; a < 10; a++) { // Repeat 10 times...
    for (int b = 0; b < 3; b++) { //  'b' counts from 0 to 2...
      strip.clear();         //   Set all pixels in RAM to 0 (off)
      for (int c = b; c < strip.numPixels(); c += 3) {
        strip.setPixelColor(c, color); // Set pixel 'c' to value 'color'
      }
      strip.show(); // Update strip with new contents
      delay(wait);  // Pause for a moment
    }
  }
}

void rainbow(int wait) {
  for (long firstPixelHue = 0; firstPixelHue < 5 * 65536; firstPixelHue += 256) {
    strip.rainbow(firstPixelHue);
    strip.show(); // Update strip with new contents
    delay(wait);  // Pause for a moment
  }
}

void theaterChaseRainbow(int wait) {
  int firstPixelHue = 0;     // First pixel starts at red (hue 0)
  for (int a = 0; a < 30; a++) { // Repeat 30 times...
    for (int b = 0; b < 3; b++) { //  'b' counts from 0 to 2...
      strip.clear();         //   Set all pixels in RAM to 0 (off)
      for (int c = b; c < strip.numPixels(); c += 3) {
        int      hue   = firstPixelHue + c * 65536L / strip.numPixels();
        uint32_t color = strip.gamma32(strip.ColorHSV(hue)); // hue -> RGB
        strip.setPixelColor(c, color); // Set pixel 'c' to value 'color'
      }
      strip.show();                // Update strip with new contents
      delay(wait);                 // Pause for a moment
      firstPixelHue += 65536 / 90; // One cycle of color wheel over 90 frames
    }
  }
}